<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" width="570" height="900" pageTitle="Openmeetings"
		preinitialize="init()" fontSize="12" applicationComplete="appInit()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:TraceTarget/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import mx.collections.ArrayCollection;
		import mx.core.FlexGlobals;
		import org.apache.openmeetings.OmVideo;

		private static const MODE_N:String = "n";
		private static const MODE_A:String = "a";
		private static const MODE_V:String = "v";
		private static const MODE_AV:String = "av";
		private static const APP_WIDTH:int = 540;
		private static const LEFT_WIDTH:int = 280;
		private static const RIGHT_WIDTH:int = 240;
		private var debugEnabled:Boolean = true;
		private var sid:String;
		private var roomid:int;
		private var audioOnly:Boolean = false;
		private var labels:Object = new Object();
		private var FPS:int;
		private var bandwidth:int = 0;
		private var quality:int = 100;
		private var echoPath:int = 256;
		private var echoSuppression:Boolean = true;
		private var microphoneRateBest:int = 22;//5, 8, 11, 22, and 44
		private var video:OmVideo;
		private var recName:String;
		private var codec:String = OmVideo.CODEC_H264;
		private var protocol:String;
		private var host:String;
		private var port:String;
		private var app:String;
		[Bindable]
		private var interview:Boolean = false;
		[Bindable]
		private var debugStr:String = "";

		private function setDimensions(width:int, height:int):void {
			mainSetupGroup.width = width;
			//mainSetupGroup.height = height;
		}

		public function debug(str:String):void {
			if (debugEnabled) {
				debugStr += str + "\n";
				trace(str + "\n");
			}
		}

		private function store():void {
			var t:SharedObject = SharedObject.getLocal('userdata');
			var g:Object = t.data ? t.data : new Object();
			g["cam"] = cams.selectedItem.data;
			g["mic"] = mics.selectedItem.data;
			g["avstored"] = modes.selectedItem.data;
			g["savecamdata"] = remember.selected;
			g["width"] = ress.selectedItem.width;
			g["height"] = ress.selectedItem.height;
			t.flush();
		}

		private static function getStoredProp(prop:String):String {
			//Initialize and get eventually stored property
			var t:SharedObject = SharedObject.getLocal('userdata');
			var g:Object = t.data;
			return g != null ? "" + g[prop] : null;
		}

		private function init():void {
			debug("init()");
			var tla:Object = FlexGlobals.topLevelApplication;
			sid = tla.parameters['sid'];
			roomid = tla.parameters['roomid'];
			audioOnly = 'true' == tla.parameters['audioOnly'];
			interview = 'true' == tla.parameters['interview'];
			var _fps:int = parseInt(tla.parameters['fps']);
			FPS = interview ? 24 : (isNaN(_fps) || _fps < 1 ? 30 : _fps);

			var lbls:Array = JSON.parse(tla.parameters['labels']) as Array;
			for (var i:int = 0; i < lbls.length; ++i) {
				labels[lbls[i].id] = lbls[i].value;
			}
			protocol = tla.parameters['protocol'];
			host = tla.parameters['host'];
			port = tla.parameters['port'];
			app = tla.parameters['app'];
		}

		private function selectListItem(combo:ComboBox, selected:int):void {
			combo.callLater(function ():void {
				if (combo.dataProvider && combo.dataProvider.length > 0) {
					combo.selectedItem = combo.dataProvider.getItemAt(selected < combo.dataProvider.length ? selected : 0);
				}
			});
		}

		private function getItemIdx(combo:ComboBox, data:String):int {
			var idx:int = 0;
			for (var i:int = 0; i < combo.dataProvider.length; ++i) {
				if (combo.dataProvider[i].data == data) {
					idx = i;
					break;
				}
			}
			return idx;
		}

		private function fillDeviceList(list:Array, combo:ComboBox, prop:String):int {
			//Initialize and get eventually stored property
			var dev:int = parseInt(getStoredProp(prop));

			var items:ArrayCollection = new ArrayCollection();
			//Get all available devices
			var foundStoredDev:int = -1;
			for (var i:int = 0; i < list.length; ++i) {
				items.addItem({label: list[i], data: i});
				if (i == dev) {
					foundStoredDev = i;
				}
			}
			combo.dataProvider = items;
			return foundStoredDev;
		}

		private function camAvail():Boolean {
			return !audioOnly && Camera.names.length > 0;
		}

		private function micAvail():Boolean {
			return Microphone.names.length > 0;
		}

		private function appInit():void {
			video = new OmVideo(videoDisplay, codec, protocol + "://" + host + ":" + port + "/" + app);
			var modItems:ArrayCollection = new ArrayCollection();
			if (camAvail() && micAvail()) {
				modItems.addItem({label: getLabel(448), data: MODE_AV});
			}
			if (camAvail()) {
				var cameras:Array = Camera.names;
				var foundedCam:int = fillDeviceList(cameras, cams, "cam");
				selectListItem(cams, foundedCam);
				modItems.addItem({label: getLabel(450), data: MODE_V});
			}
			if (micAvail()) {
				var micros:Array = Microphone.names;
				var foundedMic:int = fillDeviceList(micros, mics, "mic");
				selectListItem(mics, foundedMic);
				modItems.addItem({label: getLabel(449), data: MODE_A});
			}
			modItems.addItem({label: getLabel(451), data: MODE_N});
			modes.dataProvider = modItems;

			var avIdx:int = getItemIdx(modes, getStoredProp("avstored"));
			debug("selected avIdx::" + avIdx);
			selectListItem(modes, avIdx);

			var tla:Object = FlexGlobals.topLevelApplication;
			var resolutions:Array = JSON.parse(tla.parameters['resolutions']) as Array;
			var resItems:ArrayCollection = new ArrayCollection();
			var idx:int = 0;
			var storedWidth:int = parseInt(getStoredProp("width"));
			var storedHeight:int = parseInt(getStoredProp("height"));
			for (var i:int = 0; i < resolutions.length; ++i) {
				var r:Object = resolutions[i];
				resItems.addItem({label: r.width + 'x' + r.height + ' [' + r.label + ']', width: r.width, height: r.height});
				if (!isNaN(storedWidth) && storedWidth > 0 && !isNaN(storedHeight) && storedHeight > 0) {
					if (r.width == storedWidth && r.height == storedHeight) {
						idx = i;
					}
				} else if (r.default) {
					idx = i;
				}
			}
			ress.dataProvider = resItems;
			selectListItem(ress, idx);
			var resI:Object = ress.dataProvider.getItemAt(idx > -1 ? idx : 0);
			setResolution(resI.width, resI.height, false);
			setMode(modes.dataProvider.getItemAt(avIdx < modes.dataProvider.length ? avIdx : 0).data);

			remember.selected = true == getStoredProp("savecamdata");
		}

		public function getLabel(id:int):String {
			return labels.hasOwnProperty("" + id) ? labels[id] : (debugEnabled ? "[Missing " + id + "]" : "");
		}

		private function setMode(mode:String):void {
			var camVisible:Boolean = true;
			var micVisible:Boolean = true;
			var textVisible:Boolean = false;
			switch (mode) {
				case MODE_AV:
					break;
				case MODE_A:
					camVisible = false;
					break;
				case MODE_V:
					micVisible = false;
					break;
				case MODE_N:
					camVisible = false;
					micVisible = false;
					textVisible = true;
					break;
				default:
					debug("no valid device Setup chosen");
					break;
			}
			camGroup.visible = camVisible;
			micGroup.visible = micVisible;
			noAv.visible = textVisible;
			startTest.visible = !textVisible;
			videoGroup.visible = !textVisible;
			videoScroller.visible = camVisible;
			playGroup.visible = !textVisible;
			resGroup.visible = interview ? false : camVisible;
			attachCamera();
		}

		private function modeChanged(e:Event):void {
			setMode(e.target.selectedItem.data);
		}

		private function getMic():Microphone {
			debug("Entering getMic ...");
			var _micro:Microphone = null;
			if (micGroup.visible) {
				_micro = echoPath == 0 ? Microphone.getMicrophone(mics.selectedItem.data) : Microphone.getEnhancedMicrophone(mics.selectedItem.data);

				if (_micro != null && echoPath == 256) {
					var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
					options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
					options.echoPath = 256;
					options.nonLinearProcessing = true;
					_micro.enhancedOptions = options;
					debug("echoPath set to 256 " + _micro.enhancedOptions);
				}

				if (_micro != null) {
					_micro.codec = SoundCodec.NELLYMOSER;
					_micro.framesPerPacket = 1;
					_micro.setSilenceLevel(0, 2000);
					debug("canvas.microphoneRateBest: " + microphoneRateBest);
					_micro.rate = microphoneRateBest;
					_micro.gain = 50;
					// this has no effect if enhanced microphone is obtained
					//Microphone setUseEchoSupression(bool)
					debug("canvas.echoSuppression: " + echoSuppression);
					_micro.setUseEchoSuppression(echoSuppression);
				}
			}
			debug("... getMic DONE" + _micro);
			return _micro;
		}

		private function getCam():Camera {
			debug("Entering getCam ...");
			if (!videoScroller.visible) {
				return null;
			}
			var _camera:Camera = Camera.getCamera(cams.selectedItem.data);
			if (_camera != null && !_camera.muted) {
				//FIXME need to be unified
				if (interview) {
					//we need a fixed frame rate for the videos to merge them later on
					_camera.setMode(video.width, video.height, 24);
					debug("IS INTERVIEW ");
					_camera.setQuality(0, 98);
				} else {
					_camera.setMode(video.width, video.height, FPS);
					debug("IS NO INTERVIEW ");
					_camera.setQuality(bandwidth, quality);
				}
			}
			debug("... getCam DONE " + _camera);
			return _camera;
		}

		private function attachCamera():void {
			if (!camAvail()) {
				return;
			}
			debug("Camera selected:: " + cams.selectedItem.data);
			var cam:Camera = getCam();
			debug("Camera selected:: " + cam);
			if (cam != null) {
				if (cam.muted) {
					debug("Camera Muted");
					video.attachCamera(cam);
					cam.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
						debug("cameraStatusHandler! " + event);
						cam.removeEventListener(StatusEvent.STATUS, arguments.callee);
						if (cam.muted) {
							debug("Unable to connect to active camera.");
						} else {
							_attachCamera(cam);
						}
					});
				} else {
					_attachCamera(cam);
				}
			} else {
				var mic:Microphone = getMic();
				if (mic != null) {
					if (mic.muted) {
						var nc:NetConnection = new NetConnection();
						nc.connect(null);
						var ns:NetStream = new NetStream(nc);
						ns.attachAudio(mic);
						mic.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
							debug("micStatusHandler! " + event);
							mic.removeEventListener(StatusEvent.STATUS, arguments.callee);
							ns.close();
							nc.close();
							if (mic.muted) {
								debug("Unable to connect to active microphone.");
							}
						});
					}
				}
 			}
		}

		private function _attachCamera(cam:Camera):void {
			debug("_attachCamera():: muted ? " + cam.muted);
			if (cam.muted) {
				debug("Unable to connect to active camera.");
			} else {
				try {
					video.reset();
					video.attachCamera(cam);
					debug("_attachCamera()::done");
				} catch (error:Error) {
					debug("_attach:: " + error.message + "\n" + error.getStackTrace());
				}
			}
		}

		private function setResolution(width:int, height:int, attach:Boolean):void {
			if (!interview) {
				debug("onselect WxH :: " + width + "x" + height);

				video.resize(width, height);
				videoScroller.width = Math.min(width, RIGHT_WIDTH);
				videoScroller.height = Math.min(height, 200);
				var newWidth:int = Math.max(APP_WIDTH, APP_WIDTH + videoScroller.width - RIGHT_WIDTH);
				var newHeight:int = Math.max(500, 500 + videoScroller.height - 180);

				var yPos:int = (startTest as DisplayObject).localToGlobal(new Point()).y;
				debug("GLOBAL Y:: " + yPos);
				playGroup.y = Math.max(yPos, videoScroller.height);
				setDimensions(newWidth, newHeight);
				if (attach) {
					attachCamera();
				}
			}
		}

		private function resChanged(e:Event):void {
			setResolution(e.target.selectedItem.width, e.target.selectedItem.height, true);
		}

		private function camChanged(e:Event):void {
			attachCamera();
		}

		private function startConf(e:Event):void {
			store();
		}

		private function playTestRecording():void {
			video.play(recName);
		}

		private function startTestRecording():void {
			if (!noAv.visible) {
				startTest.enabled = false;
				play.enabled = false;
				var counter:int = 5;
				timerText.visible = true;
				timerText.text = "5 sec";
				var recTimer:Timer = new Timer(1000, counter);
				var t:Date = new Date();
				recName = "TEST_SETUP_" + t.getTime();
				var mic:Microphone = getMic();
				video.record(recName, getCam(), mic, function ():void {
					mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
					//mic.onA
					var micTimer:Timer = new Timer(100, 0);
					micTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void {
						fill.width =  mic.activityLevel * RIGHT_WIDTH / 100;
						trace("activity: " + mic.activityLevel);
					});
					recTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void {
						timerText.text = --counter + " sec";
						if (counter == 0) {
							timerText.visible = false;
							startTest.enabled = true;
							play.enabled = true;
							playTestRecording();
							micTimer.stop();
							mic.removeEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
						}
					});
					recTimer.start();
					micTimer.start();
				});
			}
		}

		function micActivityHandler(event:ActivityEvent):void{
			//Do nothing, it just need to be there.
		}
	]]>
	</fx:Script>

	<s:Group id="mainSetupGroup" width="{APP_WIDTH}">
		<s:layout>
			<s:VerticalLayout paddingLeft="5" paddingRight="5"/>
		</s:layout>
		<mx:Text width="100%" fontWeight="bold" text="{getLabel(758)}"/>
		<s:HGroup>
			<s:VGroup width="{LEFT_WIDTH}">
				<mx:Text text="{getLabel(447)}"/>
				<mx:ComboBox id="modes" width="{LEFT_WIDTH}" change="modeChanged(event)"/>
				<s:VGroup id="av">
					<s:VGroup id="camGroup">
						<mx:Text text="{getLabel(52)}"/>
						<mx:ComboBox id="cams" width="{LEFT_WIDTH}" change="camChanged(event)"/>
					</s:VGroup>
					<s:VGroup id="micGroup">
						<mx:Text text="{getLabel(53)}"/>
						<mx:ComboBox id="mics" width="{LEFT_WIDTH}"/>
					</s:VGroup>
					<s:VGroup id="resGroup">
						<s:Group><mx:Text text="{getLabel(1429)}"/><mx:Image x="260" source="../images/error.png" toolTip="{getLabel(1430)}"/></s:Group>
						<mx:ComboBox id="ress" width="{LEFT_WIDTH}" change="resChanged(event)"/>
					</s:VGroup>
					<s:Group width="100%">
						<s:layout><s:HorizontalLayout horizontalAlign="right"/></s:layout>
						<s:Button id="startTest" label="{getLabel(775)}" click="startTestRecording()"/><!--FIXME should be disabled until stream is attached-->
					</s:Group>
				</s:VGroup>
				<mx:Text text="{getLabel(452)}" id="noAv" visible="false"/>
			</s:VGroup>
			<s:Group id="videoGroup">
				<s:Scroller id="videoScroller">
					<s:Group id="videoScrollGroup">
						<mx:UIComponent id="videoDisplay" width="0" height="0" />
					</s:Group>
				</s:Scroller>
				<s:Label id="timerText" height="20" width="45" x="{videoGroup.width - 60}" y="5" paddingLeft="5" paddingTop="5"
						visible="false" backgroundColor="0xf5f5f5" fontWeight="bold"><s:text></s:text></s:Label>
				<s:VGroup id="playGroup">
					<s:Group>
						<s:Graphic x="0" z="1">
							<s:Rect width="{RIGHT_WIDTH}" height="20">
								<s:fill><s:SolidColor color="white"/></s:fill>
								<s:stroke><s:SolidColorStroke color="black" weight="2"/></s:stroke>
							</s:Rect>
						</s:Graphic>
						<mx:Image id="fill" source="../images/level_meter.png" x="2" y="1" z="3" width="0"/>
						<mx:Text text="{getLabel(767)}" x="0" z="5"/>
					</s:Group>
					<s:Group width="100%">
						<s:layout><s:HorizontalLayout horizontalAlign="right"/></s:layout>
						<s:Button id="play" label="{getLabel(764)}" enabled="false" click="playTestRecording()"/>
					</s:Group>
				</s:VGroup>
			</s:Group>
		</s:HGroup>
		<s:HGroup><mx:Image source="../images/info.png"/><mx:Text text="{getLabel(765)}" width="{APP_WIDTH - 70}"/></s:HGroup>
		<s:Group width="100%">
			<s:layout><s:HorizontalLayout horizontalAlign="right"/></s:layout>
			<s:Button id="cancel" label="{getLabel(918)}"/>
			<s:Button id="start" label="{getLabel(interview ? 54 : 761)}" click="startConf(event)"/>
		</s:Group>
		<s:CheckBox id="remember" label="{getLabel(762)}" />
	</s:Group>
	<s:TextArea id="traceArea" y="460" width="400" height="400" text="{debugStr}"/>
</s:Application>
